
		Git Bash Kullanımı
		
		Temel Bilgiler
		
		-> git --version		(Git'in kurulup kurulmadığını kontrol etmek için kullanılır)
		
		-> git config --global user.name "KullaniciAdi"		(Kullanıcı adını belirlemek için)
		
		-> git config --global user.email "email@email.com"		(Mail adresini belirlemek için)
		
		-> git config --global core.editor "uygulama.exe"		(Default editörü belirlemek için kullanılır ancak öncesinde .exe dosyasının path'ini çevresel değişkenlere eklemek gerekir)
		
		-> git config --global -l		(Tüm ayarları listelemek için)
		
		-> git init		(Yerel repository başlatmak için)
		
		-> git clone		(Uzak repository'yi kendi localine çekmek için)
		
		-> pwd		(Git'in nerede olduğunu görmek için)
		
		-> cd		(Klasör değiştirmek için kullanılır)
		
		-> ls		(Listelemek için kullanılır)
		
		-> git init		(Takip edilmesini istediğin klasörün içine cd komutu ile girip kullanılır)
		
		-> git add dosya_adi		(İlgili dosya staging area'ya taşınır)
		
		-> git add .		(Klasörde ki herşey staging area'ya eklenir)
		
		-> git commit -m "Commit açıklaması"		(İlgili commit mesajı ile birlikte kaydedilir.)
		
		-> git commit -a -m "Commit açıklaması"		(İlgili commit mesajı ile birlikte staging areaya taşınmadan doğrudan kaydedilir.)
		
		-> git status		(O anki dosyanın git durumunu gösterir)
		
		-> git log		(O ana kadar branch üzerinde yapılan tüm commitleri listeler)
		
		-> git commit --amend -m "Yeni açıklama"		(Son commit'in açıklamasını değiştirir)

		-> git checkout commit_id		(Gidilmek istenen commit'e geçirilir.)

		-> git checkout branch_adi		(Gidilmek istenen branch'e geçirilir.)
		
		
		Branching ve Merging
		
		-> git branch (Branch'leri listeler. Aktif olanın başında yıldız vardır.)
		
		-> git branch -v (Branch'leri ekstra açıklamalar ile listeler.)
		
		-> git branch yeni_branch_adi (yeni_branch_adi adında branch oluşturur.)
		
		-> git checkout yeni_branch_adi (Branch'ler arasında geçiş için kullanılır.)
		
		-> git merge yeni_branch_adi (Bulunduğun branch ile yeni_branch_adi branch'ini bulunduğun branch'te birleştirir.)
		
		-> git stash (O anda projeyi kapatmamız gerekti ve yaptıklarımızın silinmesini istemiyoruz ancak commit'te etmek istemiyoruz. O durumlarda kullanılır.)
		
		-> git stash list (Stash'lerin listesini verir.)
		
		-> git stash pop (Stash listesinde bulunan son stash'i geri getirir ve stash listesinden kaldırır.)
		
		-> git stash apply stash_ismi (İlgili stash'i stash listesinden silmeden geri getirir.)
		
		-> git stash drop stash_ismi (İlgili stash'i stash listesinden siler ve stash'i uygulamaz.)
		
		-> git checkout -b yeni_branch_adi (Yeni branch oluşturulur ve otomatik olarak yeni oluşturulan branch'e geçiş yapar.)
		
		-> git rebase master (O anda içinde bulunulan branch'in başlangıç zamanını master branch'in en son hali yapmaya yarar.)
		
		-> git rebase --abort (Conflict olduğunda rebase işlemini iptal etmek için kullanılır.)
		
		-> git mergetool dosya_adi (Conflict olan dosyanın çakışma durumlarını gösteren tool'u açar, oradan çözmeye çalışabiliriz.)
		
		-> git rebase --continue (Conflict çözüldükten sonra rebase işlemini devam ettirmeye yarar.)
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		